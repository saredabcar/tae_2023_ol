{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenLANE","text":""},{"location":"#overview","title":"Overview","text":"<p>OpenLANE is a suite that performs all ASIC implementation steps from RTL all the way down to GDSII based on several open source components including OpenROAD, Yosys, Magic, Netgen, CVC, SPEF-Extractor, KLayout and a number of custom scripts for design exploration and optimization.</p> <p>Currently, it supports both A and B variants of the sky130 PDK, the C variant of the gf180mcu PDK, and instructions to add support for other (including proprietary) PDKs are documented.</p> <p>Four main entries are required:  <pre><code>    1. HDL design files     (.v)\n2. Constraints file     (.sdc)\n3. Configuration file   (.json)\n4. PDK                  (sky130A)\n</code></pre></p> <p>The OpenLANE flow takes these elements to finally generate a GDS. In a high abstraction perspective, OpenLANE allows to convert a <code>verilog</code> design into its manufacturable version.</p> <p></p>"},{"location":"#stages","title":"Stages","text":"<p>OpenLane flow consists of several stages. By default all flow steps are run in sequence. Each stage may consist of multiple sub-stages.</p> <ol> <li>Synthesis<ol> <li><code>yosys/abc</code> - Perform RTL synthesis and technology mapping.</li> <li><code>OpenSTA</code> - Performs static timing analysis on the resulting netlist to generate timing reports</li> </ol> </li> <li>Floorplaning<ol> <li><code>init_fp</code> - Defines the core area for the macro as well as the rows (used for placement) and the tracks (used for routing)</li> <li><code>ioplacer</code> - Places the macro input and output ports</li> <li><code>pdngen</code> - Generates the power distribution network</li> <li><code>tapcell</code> - Inserts welltap and decap cells in the floorplan</li> </ol> </li> <li>Placement<ol> <li><code>RePLace</code> - Performs global placement</li> <li><code>Resizer</code> - Performs optional optimizations on the design</li> <li><code>OpenDP</code> - Performs detailed placement to legalize the globally placed components</li> </ol> </li> <li>CTS<ol> <li><code>TritonCTS</code> - Synthesizes the clock distribution network (the clock tree)</li> </ol> </li> <li>Routing<ol> <li><code>FastRoute</code> - Performs global routing to generate a guide file for the detailed router</li> <li><code>TritonRoute</code> - Performs detailed routing</li> <li><code>OpenRCX</code> - Performs SPEF extraction</li> </ol> </li> <li>Tapeout<ol> <li><code>Magic</code> - Streams out the final GDSII layout file from the routed def</li> <li><code>KLayout</code> - Streams out the final GDSII layout file from the routed def as a back-up</li> </ol> </li> <li>Signoff<ol> <li><code>Magic</code> - Performs DRC Checks &amp; Antenna Checks</li> <li><code>KLayout</code> - Performs DRC Checks</li> <li><code>Netgen</code> - Performs LVS Checks</li> <li><code>CVC</code> - Performs Circuit Validity Checks</li> </ol> </li> </ol> <p></p>"},{"location":"automatic/","title":"OpenLANE","text":""},{"location":"automatic/#automatic-flow","title":"Automatic Flow","text":""},{"location":"automatic/#1-starting-the-openlane-environment","title":"1. Starting the OpenLANE Environment","text":"<p>OpenLANE uses Docker to create a reproducible environment for your projects. To access this environment execute the following:</p> <pre><code>cd $OPENLANE_ROOT\nmake mount\n</code></pre> <p>Example</p> <p></p>"},{"location":"automatic/#2-running-the-flow","title":"2. Running the flow","text":"<p>The entry point for OpenLane is the <code>./flow.tcl</code> script. It is used to run the flow, start interactive sessions, select the configuration and create OpenLane design files.</p> <p>In order to run the flow in automatic mode, you need to execute the following command:</p> <pre><code>./flow.tcl -design &lt;design_name&gt;\n</code></pre> <p>Example</p> <p>For a design named <code>spm</code> the invocation would look something like this:</p> <pre><code>./flow.tcl -design spm\n</code></pre> <p>With a <code>tag</code>... <pre><code>./flow.tcl -design spm -tag automatic_flow_1\n</code></pre></p> <p></p>"},{"location":"automatic/#3-exit-from-the-docker-environment","title":"3. Exit from the Docker environment","text":"<p>Once the flow has finished/failed, automatically you will be taken outof the OpenLANE environment and positioned at Docker container, being able to run another flow or simply go out to your system environment, again by typing: </p> <pre><code>exit\n</code></pre> <p>Example</p> <p></p>"},{"location":"caravel/","title":"Caravel","text":""},{"location":"caravel/#harden-your-designs","title":"Harden your designs","text":""},{"location":"caravel/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Python3</li> <li>PIP</li> </ul> <p>Check if you have everything already set:</p> <pre><code>python3 --version; pip --version; docker run hello-world\n</code></pre>"},{"location":"caravel/#1-installation","title":"1.-Installation","text":"<ol> <li> <p>Create a 'caravel_suite' directory which will be the root to allocate caravel_user_project:</p> <pre><code>cd ~/eda_tools\n</code></pre> <pre><code>mkdir caravel_suite\n</code></pre> <pre><code>cd caravel_suite\n</code></pre> </li> <li> <p>Clone the caravel_user_project repository as <code>caravel origin</code>:</p> <pre><code>git clone https://github.com/efabless/caravel_user_project caravel_origin\n</code></pre> </li> <li> <p>Set the following three variables in your 'bashrc' file, then source it:</p> <pre><code>echo \"export OPENLANE_ROOT=\\\"/home/\\$USER/eda_tools/caravel_suite/caravel_origin/dependencies/openlane_src\\\"\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>echo \"export PDK_ROOT=\\\"/home/\\$USER/eda_tools/caravel_suite/caravel_origin/dependencies/pdks\\\"\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>echo \"export PDK=\"sky130A\"\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>source ~/.bashrc\n</code></pre> <p>Warning</p> <p>Confirm these are the unique variables with it's corresponding name and are actually pointing to the correct path.</p> <pre><code>echo $OPENLANE_ROOT &amp;&amp; echo $PDK_ROOT &amp;&amp; echo $PDK\n</code></pre> <p></p> </li> <li> <p>Move to <code>caravel_origin</code> directory. Inside file <code>Makefile</code>, modify the variable <code>CARAVEL_LITE</code> from 1 to 0:</p> <p>Example</p> <p></p> <p>Go back to your terminal and execute the following command:</p> <pre><code>make setup\n</code></pre> <p>This command will setup your environment by installing the following:</p> <ul> <li>The full version of caravel -&gt; ~/..../caravel_origin/</li> <li>Management core for simulation</li> <li>Openlane to harden your design -&gt; ~/..../dependencies/openlane_src/</li> <li>PDKs (sky130A &amp; gf180mcuC) -&gt; ~/..../dependencies/pdks/</li> </ul> <p>Example</p> <p>Successfully completed output:</p> <p></p> <p>Info</p> <p>If there it is any problem with caravel, you can remove it and start again. Go to 'caravel_origin' and run:</p> <pre><code>make uninstall\n</code></pre> </li> </ol>"},{"location":"caravel/#2-setting-your-design","title":"2. Setting your design","text":""},{"location":"caravel/#3-running-the-flow","title":"3. Running the flow","text":"<p>Execute the following</p> <pre><code>make user_proj_example\n</code></pre> <pre><code>make user_project_wrapper\n</code></pre>"},{"location":"extra/","title":"OpenLANE","text":""},{"location":"extra/#complementary-tools","title":"Complementary Tools","text":""},{"location":"extra/#1-openlane_summary","title":"1.- openlane_summary","text":"<p>Info</p> <p>After the OpenLane ASIC flow has finished, you have a lot of files in the <code>run</code> directory. This tool helps you to explore statistics and useful information with ease.</p>"},{"location":"extra/#installation","title":"Installation","text":"<p>1.- Go to eda_tools directory and clone the openlane_summary repository</p> <pre><code>cd ~/eda_tools\n</code></pre> <pre><code>git clone https://github.com/mattvenn/openlane_summary.git\n</code></pre> <p>2.- Move to tool directory and change to branch mpw8.</p> <pre><code>cd openlane_summary\n</code></pre> <pre><code>git checkout mpw8\n</code></pre> <p>3.- Add the tool directory to your PATH and source your bashrc.</p> <pre><code>echo \"export PATH=\\$PATH:\\\"/home/\\$USER/eda_tools/openlane_summary\\\"\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"extra/#usage","title":"Usage","text":"<p>To use the tool execute the tool, run the next command followed by the desired option:</p> <pre><code>summary.py \u2013-design &lt;design_name&gt; --&lt;option1&gt; --&lt;option2&gt;\n</code></pre> <p>Info</p> <p>Execute the following to get the options list.</p> <pre><code>summary.py \u2013h\n</code></pre> <p>Info</p> <p>A \"-1\" means that a particular check was not run.</p> <p>Example</p> <pre><code>summary.py \u2013-design APU --summary </code></pre> <pre><code>summary.py \u2013-design APU --run 0 --full-summary </code></pre> <pre><code>summary.py \u2013-design APU --run 0 --gds </code></pre>"},{"location":"extra/#2-gds3d-3d-visualizer","title":"2.- GDS3D (3D Visualizer)","text":"<p>GDS3D is an application that can interpret so called IC layouts and render them in 3D. The program accepts standard GDSII files as input data.</p>"},{"location":"extra/#installation_1","title":"Installation","text":"<p>1.- Go to eda_tools directory and clone the GDS3D repository</p> <pre><code>cd ~/eda_tools\n</code></pre> <pre><code>git clone https://github.com/trilomix/GDS3D.git\n</code></pre> <p>2.- Add the following alias and source your bashrc.</p> <pre><code>echo \"alias gds3d=\\\"/home/\\$USER/eda_tools/GDS3D/linux/GDS3D -p /home/\\$USER/eda_tools/GDS3D/techfiles/sky130.txt -i\\\"\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>source ~/.bashrc\n</code></pre> <pre><code>cd GDS3D/linux/\n</code></pre> <pre><code>chmod +x ./GDS3D\n</code></pre>"},{"location":"extra/#checking-installation","title":"Checking installation","text":"<p>A simple way to check this tool has been succesfully installed and ready to be executed, run the following:</p> <pre><code>gds3d\n</code></pre> <p>The expected output is:</p> <p></p> <p>Warning</p> <p>If you are getting errors similar to these:</p> <p></p> <p></p> <p>Try to solve it running the following sequence of commands:</p> <pre><code>sudo apt -y update &amp;&amp; sudo apt -y upgrade\n</code></pre> <pre><code>sudo apt autoremove -y\n</code></pre> <pre><code>sudo apt install -y g++ libc6 libc6-i386 libx11-6:i386 libgl1-mesa-glx libgl1-mesa-dev libgl1-mesa-glx:i386 libglu1-mesa-dev libx11-dev\n</code></pre> <p>Success</p> <p>Now, try again to execute <code>gds3d</code>. Everything should be OK now    :)</p> <p>Failure</p> <p>If the error you get is:</p> <p></p> <p>There are more questions than answers...  :(</p>"},{"location":"extra/#usage_1","title":"Usage","text":"<p>In order to use the GDS3D visualizer, you should have already defined the alias <code>gds3d</code> as explained in previous section. Thereafer you can invoke the tool ass follows:</p> <pre><code>gds3d &lt;file.gds&gt; / &lt;./path/to/file.gds&gt;\n</code></pre> <p>Example</p> <p>Assuming the current directory to be <code>$OPENLANE_ROOT</code>, the design to view its <code>GDS</code> is <code>APU</code> and the run tag is <code>automatic_flow_1</code>, the command should look something like this:</p> <pre><code>gds3d ./designs/APU/runs/automatic_flow_1/results/final/gds/APU.gds\n</code></pre>"},{"location":"interactive/","title":"OpenLANE","text":""},{"location":"interactive/#interactive-flow","title":"Interactive Flow","text":""},{"location":"interactive/#1-starting-the-openlane-environment","title":"1. Starting the OpenLANE Environment","text":"<p>OpenLANE uses Docker to create a reproducible environment for your projects. To access this environment execute the following:</p> <pre><code>cd $OPENLANE_ROOT\nmake mount\n</code></pre> <p>Example</p> <p></p>"},{"location":"interactive/#2-running-the-flow","title":"2. Running the flow","text":"<p>The entry point for OpenLane is the <code>./flow.tcl</code> script.  In order to start interactive sessions in automatic mode, you need to execute the following command:</p> <pre><code>./flow.tcl -interactive\n</code></pre> <p>Example</p> <p></p> <p>Once in OpenLANE environment, you have to source the openlane package and initialize your design:</p> <pre><code>package require openlane\n</code></pre> <p><code>prep -design &lt;design_name&gt; -tag &lt;tag_name&gt;</code></p> <p>Example</p> <p></p>"},{"location":"interactive/#interactive-flow-commands","title":"Interactive flow commands","text":"<p>When the design is correctly initialized, you can start running the interactive flow commands as the following sequence:</p> <pre><code>run_synthesis\n</code></pre> <pre><code>run_floorplan\n</code></pre> <pre><code>run_placement\n</code></pre> <pre><code>run_cts\n</code></pre> <pre><code>run_routing\n</code></pre> <p><code>write_powered_verilog -output_def ./designs/&lt;design_name&gt;/runs/&lt;run_tag&gt;/results/routing/wpv_&lt;design_name&gt;.def -output_pnl ./designs/&lt;design_name&gt;/runs/&lt;run_tag&gt;/results/routing/wpv_&lt;design_name&gt;.pnl.v -output_nl ./designs/&lt;design_name&gt;/runs/&lt;run_tag&gt;/results/routing/wpv_&lt;design_name&gt;.nl.v</code></p> <pre><code>run_magic\n</code></pre> <pre><code>run_magic_spice_export\n</code></pre> <pre><code>run_magic_drc\n</code></pre> <pre><code>run_lvs\n</code></pre> <pre><code>run_antenna_check\n</code></pre>"},{"location":"interactive/#3-interrupted-flow","title":"3. Interrupted flow","text":"<p>OpenLANE allows you to return to a previous \u2018on going\u2019 flow in interactive mode.</p> <p>Example</p> <p>Assuming you have run until <code>placement</code> step, and after a while you want to continue that particular run, you must mount docker and execute <code>flow.tcl</code> script with the run name you previously assigned to it and continue executing the flow.</p> <p></p> <p></p> <p></p>"}]}